from flask import Flask, jsonify, request
from flask_cors import CORS
import requests
import logging

app = Flask(__name__)
CORS(app)
logging.basicConfig(level=logging.DEBUG)

@app.route('/webhook', methods=['POST'])
def webhook():
    try:
        cripto = request.json.get('queryResult', {}).get('parameters', {}).get('cripto', '')
        if not cripto:
            logging.error("Cripto non fornita.")
            return jsonify({
                'fulfillmentMessages': [{'text': {'text': ['Input non valido']}}]
            })

        logging.debug(f"Richiesta ricevuta per: {cripto}")
        
        # Richiesta alla API di CoinGecko
        response = requests.get(f'https://api.coingecko.com/api/v3/simple/price?ids={cripto}&vs_currencies=usd')
        if response.status_code != 200:
            logging.error(f"Errore nella richiesta a CoinGecko per {cripto}: {response.status_code}")
            return jsonify({
                'fulfillmentMessages': [{'text': {'text': ['Errore nel recupero dei dati per ' + cripto]}}]
            })
        
        data = response.json()
        price = data.get(cripto, {}).get('usd')
        
        if price:
            logging.debug(f"Prezzo trovato per {cripto}: ${price}")
            return jsonify({
                'fulfillmentMessages': [{'text': {'text': [f'Il prezzo di {cripto} è ${price}']}}]
            })
        else:
            logging.error(f"Prezzo non trovato per {cripto}")
            return jsonify({
                'fulfillmentMessages': [{'text': {'text': [f'Non ho trovato informazioni per {cripto}']}}]
            })

    except Exception as e:
        logging.error(f"Errore interno: {e}")
        return jsonify({
            'fulfillmentMessages': [{'text': {'text': ['Si è verificato un errore nel server']}}]
        })

if __name__ == '__main__':
    app.run(debug=True)
